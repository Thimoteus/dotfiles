// Generated by psc-bundle 0.8.4.0
var PS = {};
(function(exports) {
  /* global exports */
  "use strict";

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var Show = function (show) {
      this.show = show;
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var id = function (dict) {
      return dict.id;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["Bounded"] = Bounded;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["semigroupString"] = semigroupString;
  exports["boundedInt"] = boundedInt;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };                                         
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $eq$less$less = function (dictBind) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](dictBind)(m)(f);
          };
      };
  };
  exports["=<<"] = $eq$less$less;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 27, column 1 - line 28, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                   
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 122, column 3 - line 123, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 181, column 3 - line 182, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["intercalate"] = intercalate;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 53, column 3 - line 54, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 29, column 1 - line 30, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"](functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 93, column 3 - line 94, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Prelude.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Prelude.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Data_Maybe = PS["Data.Maybe"];
  var hush = Data_Either.either(Prelude["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["hush"] = hush;
})(PS["Control.Error.Util"] = PS["Control.Error.Util"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._setTimeout = function (nonCanceler, millis, aff) {
    var set = setTimeout, clear = clearTimeout;
    if (millis <= 0 && typeof setImmediate === "function") {
      set = setImmediate;
      clear = clearImmediate;
    }
    return function(success, error) {
      var canceler;

      var timeout = set(function() {
        canceler = aff(success, error);
      }, millis);

      return function(e) {
        return function(s, f) {
          if (canceler !== undefined) {
            return canceler(e)(s, f);
          } else {
            clear(timeout);

            try {
              s(true);
            } catch (err) {
              f(err);
            }

            return nonCanceler;
          }
        };
      };
    };
  }

  exports._makeAff = function (cb) {
    return function(success, error) {
      return cb(function(e) {
        return function() {
          error(e);
        };
      })(function(v) {
        return function() {
          try {
            success(v);
          } catch (err) {
            error(err);
          }
        };
      })();
    }
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      try {
        success(v);
      } catch (err) {
        error(err);
      }

      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(f(v));
        } catch (err) {
          error(err);
        }
      }, error);
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                try {
                  s(true);
                } catch (err) {
                  f(err);
                }
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        try {
          successT(v)();
        } catch (err) {
          errorT(err)();
        }
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      try {
        success(e());
      } catch (err) {
        error(err);
      }

      return nonCanceler;
    };
  }
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];        
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.liftEff = liftEff;
  };                                 
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Exception

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];                                 
  var showError = new Prelude.Show($foreign.showErrorImpl);
  exports["showError"] = showError;
  exports["message"] = $foreign.message;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];        
  var $less$dollar = function (dictFunctor) {
      return function (x) {
          return function (f) {
              return Prelude["<$>"](dictFunctor)(Prelude["const"](x))(f);
          };
      };
  };
  exports["<$"] = $less$dollar;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];        
  var MonadRec = function (__superclass_Prelude$dotMonad_0, tailRecM) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };             
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor["<$"]((((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(new Data_Either.Left(u))(ma);
          })(Prelude.unit);
      };
  };
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRecM"] = tailRecM;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Prelude.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var applyAff = new Prelude.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Prelude["<$>"](functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Prelude.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
  var alwaysCanceler = Prelude["const"](Prelude.pure(applicativeAff)(true));
  var later$prime = function (n) {
      return function (aff) {
          return $foreign._setTimeout(nonCanceler, n, aff);
      };
  };
  var later = later$prime(0);
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                       
  var bindAff = new Prelude.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Prelude.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (f) {
      return function (a) {
          var go = function (size) {
              return function (f1) {
                  return function (a1) {
                      return Prelude.bind(bindAff)(f1(a1))(function (v) {
                          if (v instanceof Data_Either.Left) {
                              if (size < 100) {
                                  return go(size + 1 | 0)(f1)(v.value0);
                              };
                              if (Prelude.otherwise) {
                                  return later(Control_Monad_Rec_Class.tailRecM(monadRecAff)(f1)(v.value0));
                              };
                          };
                          if (v instanceof Data_Either.Right) {
                              return Prelude.pure(applicativeAff)(v.value0);
                          };
                          throw new Error("Failed pattern match at Control.Monad.Aff line 198, column 7 - line 203, column 1: " + [ v.constructor.name ]);
                      });
                  };
              };
          };
          return go(0)(f)(a);
      };
  });
  exports["runAff"] = runAff;
  exports["nonCanceler"] = nonCanceler;
  exports["makeAff"] = makeAff;
  exports["later'"] = later$prime;
  exports["later"] = later;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
  exports["monadRecAff"] = monadRecAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var print = function (dictShow) {
      return function ($1) {
          return $foreign.log(Prelude.show(dictShow)($1));
      };
  };
  exports["print"] = print;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var log = function ($2) {
      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log($2));
  };
  exports["log"] = log;
})(PS["Control.Monad.Aff.Console"] = PS["Control.Monad.Aff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];        
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 11, column 1 - line 12, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];        
  var $colon = $foreign.cons;
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });                          
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var span = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $42 = uncons(xs);
                  if ($42 instanceof Data_Maybe.Just && p($42.value0.head)) {
                      var __tco_acc = $colon($42.value0.head)(acc);
                      acc = __tco_acc;
                      xs = $42.value0.tail;
                      continue tco;
                  };
                  return {
                      init: $foreign.reverse(acc), 
                      rest: xs
                  };
              };
          };
      };
      return go([  ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["filter"] = $foreign.filter;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toString"] = $foreign.toString;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringImpl = function (just) {
    return function (nothing) {
      return function (s) {
        /* jshint bitwise: false */
        var i = parseFloat(s);
        return (i | 0) === i ? just(i) : nothing;
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Math"];
  exports["round"] = $foreign.round;
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];
  var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 49, column 1 - line 56, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  exports["fromString"] = fromString;
  exports["round"] = round;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 371, column 1 - line 379, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($374) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($374));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 767, column 3 - line 771, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 765, column 3 - line 766, column 3: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["reverse"] = reverse;
  exports[":"] = $colon;
  exports["foldableList"] = foldableList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";          

  exports.nullable = function(a, r, f) {
      return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];                              
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromChar = Data_Char.toString;
  var contains = function (x) {
      return function (s) {
          return Data_Maybe.isJust(indexOf(x)(s));
      };
  };                                                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["contains"] = contains;
  exports["fromChar"] = fromChar;
  exports["charAt"] = charAt;
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["take"] = $foreign.take;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var TimeValue = function (fromHours, fromMilliseconds, fromMinutes, fromSeconds, toHours, toMilliseconds, toMinutes, toSeconds) {
      this.fromHours = fromHours;
      this.fromMilliseconds = fromMilliseconds;
      this.fromMinutes = fromMinutes;
      this.fromSeconds = fromSeconds;
      this.toHours = toHours;
      this.toMilliseconds = toMilliseconds;
      this.toMinutes = toMinutes;
      this.toSeconds = toSeconds;
  };
  var toSeconds = function (dict) {
      return dict.toSeconds;
  };
  var toMinutes = function (dict) {
      return dict.toMinutes;
  };
  var toMilliseconds = function (dict) {
      return dict.toMilliseconds;
  };
  var toHours = function (dict) {
      return dict.toHours;
  };
  var timeValueSeconds = new TimeValue(function (v) {
      return v * 3600.0;
  }, function (v) {
      return v / 1000.0;
  }, function (v) {
      return v * 60.0;
  }, function (n) {
      return n;
  }, function (v) {
      return v / 3600.0;
  }, function (v) {
      return v * 1000.0;
  }, function (v) {
      return v / 60.0;
  }, function (n) {
      return n;
  });
  var fromSeconds = function (dict) {
      return dict.fromSeconds;
  };
  var fromMinutes = function (dict) {
      return dict.fromMinutes;
  };
  var fromMilliseconds = function (dict) {
      return dict.fromMilliseconds;
  };
  var fromHours = function (dict) {
      return dict.fromHours;
  };
  exports["TimeValue"] = TimeValue;
  exports["fromMilliseconds"] = fromMilliseconds;
  exports["fromSeconds"] = fromSeconds;
  exports["fromMinutes"] = fromMinutes;
  exports["fromHours"] = fromHours;
  exports["toMilliseconds"] = toMilliseconds;
  exports["toSeconds"] = toSeconds;
  exports["toMinutes"] = toMinutes;
  exports["toHours"] = toHours;
  exports["timeValueSeconds"] = timeValueSeconds;
})(PS["Data.Time"] = PS["Data.Time"] || {});
(function(exports) {
  /* globals exports */
  "use strict";

  exports.readFloat = parseFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Global"];
  exports["readFloat"] = $foreign.readFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var right = Prelude.append(Prelude.semigroupString)("%{r}");
  var fg = function (color) {
      return function (text) {
          return "%{F" + (color + ("}" + (text + "%{F-}")));
      };
  };
  var center = Prelude.append(Prelude.semigroupString)("%{c}");
  exports["fg"] = fg;
  exports["center"] = center;
  exports["right"] = right;
})(PS["Lemonbar.Format"] = PS["Lemonbar.Format"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return function() {
        return buff.toString(enc);
      };
    };
  };
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];        
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Prelude.Show(function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 18, column 3 - line 19, column 3: " + [ v.constructor.name ]);
  });
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["showEncoding"] = showEncoding;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Node.Buffer"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Node_Encoding = PS["Node.Encoding"];
  var toString = function ($3) {
      return $foreign.toStringImpl(Prelude.show(Node_Encoding.showEncoding)($3));
  };
  exports["toString"] = toString;
})(PS["Node.Buffer"] = PS["Node.Buffer"] || {});
(function(exports) {
    "use strict";
  exports.execFileImpl = function execImpl(command) {
    return function(args) {
      return function(opts) {
        return function(callback) {
          return function() {
            return require("child_process").execFile(command, args, opts, function(err, stdout, stderr) {
              callback(err)(stdout)(stderr)();
            });
          };
        };
      };
    };
  };

  exports["undefined"] = undefined;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function(x) { return x; }
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Node.ChildProcess"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Function = PS["Data.Function"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Posix = PS["Data.Posix"];
  var Data_Posix_Signal_1 = PS["Data.Posix.Signal"];
  var Data_Posix_Signal_1 = PS["Data.Posix.Signal"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_FS = PS["Node.FS"];
  var Node_Stream = PS["Node.Stream"];
  var defaultExecOptions = {
      cwd: Data_Maybe.Nothing.value, 
      env: Data_Maybe.Nothing.value, 
      timeout: Data_Maybe.Nothing.value, 
      maxBuffer: Data_Maybe.Nothing.value, 
      killSignal: Data_Maybe.Nothing.value, 
      uid: Data_Maybe.Nothing.value, 
      gid: Data_Maybe.Nothing.value
  };
  var convertExecOptions = function (opts) {
      return Unsafe_Coerce.unsafeCoerce({
          cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd), 
          env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env), 
          timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout), 
          maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer), 
          killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal), 
          uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid), 
          gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
      });
  };
  var execFile = function (cmd) {
      return function (args) {
          return function (opts) {
              return function (callback) {
                  return $foreign.execFileImpl(cmd)(args)(convertExecOptions(opts))(function (err) {
                      return function (stdout$prime) {
                          return function (stderr$prime) {
                              return callback({
                                  error: Data_Nullable.toMaybe(err), 
                                  stdout: stdout$prime, 
                                  stderr: stderr$prime
                              });
                          };
                      };
                  });
              };
          };
      };
  };
  exports["defaultExecOptions"] = defaultExecOptions;
  exports["execFile"] = execFile;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function(exports) {
    "use strict";
  var os =require("os");         
  exports.loadavgImpl = os.loadavg;
  exports.uptime = os.uptime;
})(PS["Node.OS"] = PS["Node.OS"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var $foreign = PS["Node.OS"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Time = PS["Data.Time"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var loadavg = (function () {
      var extract = function (xs) {
          return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array["!!"](xs)(0))(function (v) {
              return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array["!!"](xs)(1))(function (v1) {
                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array["!!"](xs)(2))(function (v2) {
                      return Prelude.pure(Data_Maybe.applicativeMaybe)({
                          one: v, 
                          five: v1, 
                          fifteen: v2
                      });
                  });
              });
          });
      };
      return Control_Bind["=<<"](Control_Monad_Eff.bindEff)(function ($33) {
          return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.fromMaybe({
              one: 0.0, 
              five: 0.0, 
              fifteen: 0.0
          })(extract($33)));
      })($foreign.loadavgImpl);
  })();
  exports["loadavg"] = loadavg;
  exports["uptime"] = $foreign.uptime;
})(PS["Node.OS"] = PS["Node.OS"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Time = PS["Data.Time"];
  var Snail_Types_1 = PS["Snail.Types"];
  var Snail_Types_1 = PS["Snail.Types"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff_Console = PS["Control.Monad.Aff.Console"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception_1 = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Exception_1 = PS["Control.Monad.Eff.Exception"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_ChildProcess = PS["Node.ChildProcess"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS_Aff = PS["Node.FS.Aff"];
  var Node_OS = PS["Node.OS"];
  var uptime = Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Node_OS.uptime);
  var sleep = function (n) {
      return Control_Monad_Aff["later'"](n * 1000 | 0)(Prelude.pure(Control_Monad_Aff.applicativeAff)(Prelude.unit));
  };
  var runFileImp = function (cmd) {
      return function (args) {
          return Control_Monad_Aff.makeAff(Prelude["const"](Node_ChildProcess.execFile(cmd)(args)(Node_ChildProcess.defaultExecOptions)));
      };
  };
  var run = function (cmd) {
      return function (args) {
          return Prelude.bind(Control_Monad_Aff.bindAff)(runFileImp(cmd)(args))(function (v) {
              return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Node_Buffer.toString(Node_Encoding.ASCII.value)(v.stdout)))(function (v1) {
                  return Prelude.pure(Control_Monad_Aff.applicativeAff)(Data_Maybe.maybe(new Data_Either.Right(v1))(Data_Either.Left.create)(v.error));
              });
          });
      };
  };                                                                                              
  var pipe = Prelude.bind(Control_Monad_Aff.bindAff);
  var loadavg = Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Node_OS.loadavg);      
  var echo = function (s) {
      return Control_Apply["*>"](Control_Monad_Aff.applyAff)(Control_Monad_Aff_Console.log(s))(Prelude.pure(Control_Monad_Aff.applicativeAff)(s));
  };
  var crawl = Control_Monad_Aff.runAff(Control_Monad_Eff_Console.print(Control_Monad_Eff_Exception_1.showError))(Prelude["const"](Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit)));
  exports["loadavg"] = loadavg;
  exports["uptime"] = uptime;
  exports["sleep"] = sleep;
  exports["pipe"] = pipe;
  exports["echo"] = echo;
  exports["run"] = run;
  exports["crawl"] = crawl;
})(PS["Snail"] = PS["Snail"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Snail = PS["Snail"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];        
  var script = function (n) {
      return function (s) {
          return Control_Monad_Rec_Class.forever(Control_Monad_Aff.monadRecAff)(Control_Apply["*>"](Control_Monad_Aff.applyAff)(Snail.pipe(s)(Snail.echo))(Snail.sleep(n)));
      };
  };
  exports["script"] = script;
})(PS["Lemonbar.Script"] = PS["Lemonbar.Script"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Lemonbar_Format = PS["Lemonbar.Format"];
  var Data_Monoid = PS["Data.Monoid"];        
  var yellow = Lemonbar_Format.fg("#FFFF00");
  var red = Lemonbar_Format.fg("#FF0000");
  var green = Lemonbar_Format.fg("#00FF00");
  var pctColorInv = function (n) {
      if (n < 0.32999999999999996) {
          return green;
      };
      if (n < 0.6599999999999999) {
          return yellow;
      };
      if (Prelude.otherwise) {
          return red;
      };
      throw new Error("Failed pattern match at Util line 9, column 1 - line 14, column 1: " + [ n.constructor.name ]);
  };
  var foldWidgets = function (dictFoldable) {
      return function ($3) {
          return Lemonbar_Format.right(Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(" < ")($3));
      };
  };
  exports["foldWidgets"] = foldWidgets;
  exports["yellow"] = yellow;
  exports["green"] = green;
  exports["red"] = red;
  exports["pctColorInv"] = pctColorInv;
})(PS["Util"] = PS["Util"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Snail = PS["Snail"];
  var Util = PS["Util"];
  var Data_String = PS["Data.String"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];        
  var cpu = (function () {
      var f = function (n) {
          var col = Util.pctColorInv(n * 0.6599999999999999);
          return "Load: " + col(Data_String.take(4)(Prelude.show(Prelude.showNumber)(n)));
      };
      return Control_Bind["=<<"](Control_Monad_Aff.bindAff)(function ($1) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)(f((function (v) {
              return v.one;
          })($1)));
      })(Snail.loadavg);
  })();
  exports["cpu"] = cpu;
})(PS["Loadavg"] = PS["Loadavg"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Snail = PS["Snail"];
  var $$Math = PS["Math"];
  var Data_Int = PS["Data.Int"];
  var Data_Time = PS["Data.Time"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];        
  var toDays = function (v) {
      return $$Math.floor(v / (24.0 * 60.0));
  };
  var getRemM = function (v) {
      return function (d) {
          return function (h) {
              return v - d * 24.0 * 60.0 - h * 60.0;
          };
      };
  };
  var getRemH = function (v) {
      return function (m) {
          return v - m * 24.0 * 60.0;
      };
  };
  var addLeadingZero = function (v) {
      if (v === "0") {
          return "00";
      };
      if (v === "1") {
          return "01";
      };
      if (v === "2") {
          return "02";
      };
      if (v === "3") {
          return "03";
      };
      if (v === "4") {
          return "04";
      };
      if (v === "5") {
          return "05";
      };
      if (v === "6") {
          return "06";
      };
      if (v === "7") {
          return "07";
      };
      if (v === "8") {
          return "08";
      };
      if (v === "9") {
          return "09";
      };
      return v;
  };
  var showUptime = function (s) {
      var h = Data_Time.toMinutes(Data_Time.timeValueSeconds)(s);
      var dd = toDays(h);
      var remh = getRemH(h)(dd);
      var hh = $$Math.floor(remh / 60.0);
      var mm = $$Math.floor(getRemM(h)(dd)(hh));
      return Prelude.show(Prelude.showInt)(Data_Int.round(dd)) + ("d " + (addLeadingZero(Prelude.show(Prelude.showInt)(Data_Int.round(hh))) + (":" + addLeadingZero(Prelude.show(Prelude.showInt)(Data_Int.round(mm))))));
  };
  var upTimeFunk = Control_Bind["=<<"](Control_Monad_Aff.bindAff)(function ($11) {
      return Prelude.pure(Control_Monad_Aff.applicativeAff)(showUptime($11));
  })(Snail.uptime);
  exports["addLeadingZero"] = addLeadingZero;
  exports["getRemM"] = getRemM;
  exports["getRemH"] = getRemH;
  exports["toDays"] = toDays;
  exports["showUptime"] = showUptime;
  exports["upTimeFunk"] = upTimeFunk;
})(PS["Uptime"] = PS["Uptime"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Global = PS["Global"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_String = PS["Data.String"];
  var Data_List = PS["Data.List"];
  var Data_Int = PS["Data.Int"];
  var whitespace = function (str) {
      var $41 = Data_String.charAt(0)(str);
      if ($41 instanceof Data_Maybe.Just) {
          var $42 = $41.value0 === "\r" || ($41.value0 === "\n" || ($41.value0 === "\t" || $41.value0 === " "));
          if ($42) {
              return {
                  consumed: new Data_Either.Right($41.value0), 
                  remaining: Data_String.drop(1)(str)
              };
          };
          if (!$42) {
              var msg = "Expected whitespace but found " + (Prelude.show(Prelude.showChar)($41.value0) + (" when trying to parse the string " + (Prelude.show(Prelude.showString)(Data_String.take(5)(str)) + "...")));
              return {
                  consumed: new Data_Either.Left(msg), 
                  remaining: str
              };
          };
          throw new Error("Failed pattern match at Text.Parsing.Simple line 677, column 18 - line 685, column 8: " + [ $42.constructor.name ]);
      };
      return {
          consumed: new Data_Either.Left("Reached end of file"), 
          remaining: str
      };
  };
  var skip = function (v) {
      return function (str) {
          return {
              consumed: new Data_Either.Right(Prelude.unit), 
              remaining: (v(str)).remaining
          };
      };
  };
  var sat = function (f) {
      return function (str) {
          var $84 = Data_String.charAt(0)(str);
          if ($84 instanceof Data_Maybe.Just) {
              var $85 = f($84.value0);
              if ($85) {
                  return {
                      consumed: new Data_Either.Right($84.value0), 
                      remaining: Data_String.drop(1)(str)
                  };
              };
              if (!$85) {
                  var msg = "Character " + (Prelude.show(Prelude.showChar)($84.value0) + (" did not satisfy predicate when trying to parse the string " + (Prelude.show(Prelude.showString)(Data_String.take(5)(str)) + "...")));
                  return {
                      consumed: new Data_Either.Left(msg), 
                      remaining: str
                  };
              };
              throw new Error("Failed pattern match at Text.Parsing.Simple line 280, column 10 - line 288, column 8: " + [ $85.constructor.name ]);
          };
          return {
              consumed: new Data_Either.Left("Reached end of file"), 
              remaining: str
          };
      };
  };
  var runParser = function (v) {
      return v;
  };
  var parse = function (v) {
      return function (input) {
          return (v(input)).consumed;
      };
  };       
  var many = function (p) {
      var go = function (__copy_curr) {
          return function (__copy_f) {
              return function (__copy_acc) {
                  var curr = __copy_curr;
                  var f = __copy_f;
                  var acc = __copy_acc;
                  tco: while (true) {
                      var y = runParser(f)(curr);
                      if (y.consumed instanceof Data_Either.Right) {
                          var __tco_f = f;
                          var __tco_acc = Data_List[":"](y.consumed.value0)(acc);
                          curr = y.remaining;
                          f = __tco_f;
                          acc = __tco_acc;
                          continue tco;
                      };
                      return {
                          consumed: new Data_Either.Right(Data_List.reverse(acc)), 
                          remaining: curr
                      };
                  };
              };
          };
      };
      return function (str) {
          return go(str)(p)(Data_List.Nil.value);
      };
  };
  var whitespaces = many(whitespace);
  var skipSpaces = skip(whitespaces);
  var isn$primetAny = function (s) {
      return function (str) {
          var $125 = Data_String.charAt(0)(str);
          if ($125 instanceof Data_Maybe.Just) {
              var $126 = Data_String.contains(Data_String.fromChar($125.value0))(s);
              if ($126) {
                  var msg = "Expecting none of " + (Prelude.show(Prelude.showString)(s) + (" but found " + (Prelude.show(Prelude.showChar)($125.value0) + (" when trying to parse the string " + (Prelude.show(Prelude.showString)(Data_String.take(5)(str)) + "...")))));
                  return {
                      consumed: new Data_Either.Left(msg), 
                      remaining: str
                  };
              };
              if (!$126) {
                  return {
                      consumed: new Data_Either.Right($125.value0), 
                      remaining: Data_String.drop(1)(str)
                  };
              };
              throw new Error("Failed pattern match at Text.Parsing.Simple line 316, column 18 - line 326, column 8: " + [ $126.constructor.name ]);
          };
          return {
              consumed: new Data_Either.Left("Reached end of file"), 
              remaining: str
          };
      };
  };
  var functorParser = new Prelude.Functor(function (f) {
      return function (v) {
          return function (str) {
              var x = v(str);
              var $137 = {};
              for (var $138 in x) {
                  if (x.hasOwnProperty($138)) {
                      $137[$138] = x[$138];
                  };
              };
              $137.consumed = Prelude["<$>"](Data_Either.functorEither)(f)(x.consumed);
              return $137;
          };
      };
  });
  var fromCharList = function (dictFoldable) {
      return Data_Foldable.foldMap(dictFoldable)(Data_Monoid.monoidString)(Data_String.fromChar);
  };
  var fail = function (msg) {
      return function (str) {
          return {
              consumed: new Data_Either.Left(msg), 
              remaining: str
          };
      };
  };
  var digit = function (str) {
      var $143 = Data_String.charAt(0)(str);
      if ($143 instanceof Data_Maybe.Just) {
          var $144 = $143.value0 >= "0" && $143.value0 <= "9";
          if ($144) {
              return {
                  consumed: new Data_Either.Right($143.value0), 
                  remaining: Data_String.drop(1)(str)
              };
          };
          if (!$144) {
              var msg = "Expected a digit but found " + (Prelude.show(Prelude.showChar)($143.value0) + (" when trying to parse the string " + (Prelude.show(Prelude.showString)(Data_String.take(5)(str)) + "...")));
              return {
                  consumed: new Data_Either.Left(msg), 
                  remaining: str
              };
          };
          throw new Error("Failed pattern match at Text.Parsing.Simple line 439, column 18 - line 447, column 8: " + [ $144.constructor.name ]);
      };
      return {
          consumed: new Data_Either.Left("Reached end of file"), 
          remaining: str
      };
  };
  var $$char = function (x) {
      return function (str) {
          var $155 = Data_String.charAt(0)(str);
          if ($155 instanceof Data_Maybe.Just) {
              var $156 = $155.value0 === x;
              if ($156) {
                  return {
                      consumed: new Data_Either.Right($155.value0), 
                      remaining: Data_String.drop(1)(str)
                  };
              };
              if (!$156) {
                  var msg = "Expected " + (Prelude.show(Prelude.showChar)(x) + (" but found " + (Prelude.show(Prelude.showChar)($155.value0) + (" when trying to parse the string " + (Prelude.show(Prelude.showString)(Data_String.take(5)(str)) + "...")))));
                  return {
                      consumed: new Data_Either.Left(msg), 
                      remaining: str
                  };
              };
              throw new Error("Failed pattern match at Text.Parsing.Simple line 385, column 18 - line 395, column 8: " + [ $156.constructor.name ]);
          };
          return {
              consumed: new Data_Either.Left("Reached end of file"), 
              remaining: str
          };
      };
  };
  var applyParser = new Prelude.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (str) {
              var f$prime = v(str);
              var x$prime = v1(f$prime.remaining);
              var consumed = Prelude["<*>"](Data_Either.applyEither)(f$prime.consumed)(x$prime.consumed);
              return {
                  consumed: consumed, 
                  remaining: x$prime.remaining
              };
          };
      };
  });
  var bindParser = new Prelude.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (mf) {
          return function (str) {
              var x = v(str);
              if (x.consumed instanceof Data_Either.Right) {
                  return runParser(mf(x.consumed.value0))(x.remaining);
              };
              var msg = "Parse failed at " + (Data_String.take(5)(str) + "...");
              return {
                  consumed: new Data_Either.Left(msg), 
                  remaining: str
              };
          };
      };
  });
  var some = function (p) {
      return Prelude["<*>"](applyParser)(Prelude["<$>"](functorParser)(Data_List.Cons.create)(p))(many(p));
  };
  var applicativeParser = new Prelude.Applicative(function () {
      return applyParser;
  }, function (x) {
      return function (str) {
          return {
              consumed: new Data_Either.Right(x), 
              remaining: str
          };
      };
  });
  var altR = function (v) {
      return function (v1) {
          return function (str) {
              var z = v1(str);
              if (z.consumed instanceof Data_Either.Right) {
                  return z;
              };
              return v(str);
          };
      };
  };
  var word = altR(fail("Expected contiguous string of nonwhitespace"))(Prelude["<$>"](functorParser)(fromCharList(Data_List.foldableList))(some(sat(function (c) {
      return c !== " " && (c !== "\t" && (c !== "\r" && c !== "\n"));
  }))));
  var altL = function (v) {
      return function (v1) {
          return function (str) {
              var z = v(str);
              if (z.consumed instanceof Data_Either.Right) {
                  return z;
              };
              return v1(str);
          };
      };
  };
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, altL);
  var numerals = Prelude.bind(bindParser)(Control_Alt["<|>"](altParser)(digit)($$char("-")))(function (v) {
      return Prelude.bind(bindParser)(many(digit))(function (v1) {
          return Prelude.pure(applicativeParser)(fromCharList(Data_List.foldableList)(Data_List[":"](v)(v1)));
      });
  });
  var $$int = Prelude.bind(bindParser)(numerals)(function (v) {
      var $195 = Data_Int.fromString(v);
      if ($195 instanceof Data_Maybe.Just) {
          return Prelude.pure(applicativeParser)($195.value0);
      };
      return fail("Expected an int but found " + Prelude.show(Prelude.showString)(v));
  });
  var number = altR(fail("Expected a number"))(Prelude.bind(bindParser)(numerals)(function (v) {
      return Prelude.bind(bindParser)($$char("."))(function () {
          return Prelude.bind(bindParser)(Prelude["<$>"](functorParser)(fromCharList(Data_List.foldableList))(many(digit)))(function (v1) {
              return Prelude.pure(applicativeParser)(Global.readFloat(v + ("." + v1)));
          });
      });
  }));
  exports["number"] = number;
  exports["int"] = $$int;
  exports["word"] = word;
  exports["skipSpaces"] = skipSpaces;
  exports["whitespaces"] = whitespaces;
  exports["whitespace"] = whitespace;
  exports["digit"] = digit;
  exports["char"] = $$char;
  exports["isn'tAny"] = isn$primetAny;
  exports["sat"] = sat;
  exports["skip"] = skip;
  exports["some"] = some;
  exports["many"] = many;
  exports["fail"] = fail;
  exports["fromCharList"] = fromCharList;
  exports["altR"] = altR;
  exports["altL"] = altL;
  exports["parse"] = parse;
  exports["functorParser"] = functorParser;
  exports["altParser"] = altParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["bindParser"] = bindParser;
})(PS["Text.Parsing.Simple"] = PS["Text.Parsing.Simple"] || {});
(function(exports) {
  // Generated by psc version 0.8.4.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Snail = PS["Snail"];
  var Uptime = PS["Uptime"];
  var Loadavg = PS["Loadavg"];
  var Util = PS["Util"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Lemonbar_Script = PS["Lemonbar.Script"];
  var Lemonbar_Format = PS["Lemonbar.Format"];
  var Control_Error_Util = PS["Control.Error.Util"];
  var Text_Parsing_Simple = PS["Text.Parsing.Simple"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Data_Foldable = PS["Data.Foldable"];        
  var wifi = (function () {
      var parseIp = function (str) {
          var words = Data_String.split(" ")(str);
          var realWords = Data_Array.filter(function (v) {
              return v !== "";
          })(words);
          var important = Data_Array.dropWhile(function (v) {
              return v !== "src";
          })(realWords);
          return Data_Array["!!"](important)(1);
      };
      var failMsg = Util.red("None");
      var showIp = function (v) {
          if (v === "") {
              return failMsg;
          };
          return Data_Maybe.maybe(failMsg)(Util.green)(parseIp(v));
      };
      var succ = function ($42) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)("Wifi: " + showIp(Data_Maybe.fromMaybe("")(Data_Array.head(Data_Array.filter(Data_String.contains("src"))(Data_String.split("\n")($42))))));
      };
      var fail = function ($43) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)(Util.red(Control_Monad_Eff_Exception.message($43)));
      };
      return Prelude[">>="](Control_Monad_Aff.bindAff)(Snail.run("ip")([ "r" ]))(Data_Either.either(fail)(succ));
  })();
  var temp = (function () {
      var parseTemp = Prelude["<$>"](Text_Parsing_Simple.functorParser)(function (v) {
          return v / 1000 | 0;
      })(Text_Parsing_Simple["int"]);
      var pad = function (x) {
          return "Temp: " + (x + "\xb0C");
      };
      var colorize = function (n) {
          if (n < 40) {
              return Util.green(Prelude.show(Prelude.showInt)(n));
          };
          if (n < 50) {
              return Util.yellow(Prelude.show(Prelude.showInt)(n));
          };
          if (Prelude.otherwise) {
              return Util.red(Prelude.show(Prelude.showInt)(n));
          };
          throw new Error("Failed pattern match at Main line 83, column 1 - line 94, column 1: " + [ n.constructor.name ]);
      };
      var showTemp = function ($44) {
          return Data_Either.either(Util.red)(function ($45) {
              return pad(colorize($45));
          })(Text_Parsing_Simple.parse(parseTemp)($44));
      };
      var catArg = [ "/sys/class/thermal/thermal_zone0/temp" ];
      return Prelude[">>="](Control_Monad_Aff.bindAff)(Snail.run("cat")(catArg))(Data_Either.either(function ($46) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)(Util.red(Control_Monad_Eff_Exception.message($46)));
      })(function ($47) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)(showTemp($47));
      }));
  })();
  var parseBattery = Prelude.bind(Text_Parsing_Simple.bindParser)(Text_Parsing_Simple.many(Text_Parsing_Simple["isn'tAny"]("0123456789")))(function () {
      return Prelude.bind(Text_Parsing_Simple.bindParser)(Text_Parsing_Simple.digit)(function () {
          return Prelude.bind(Text_Parsing_Simple.bindParser)(Text_Parsing_Simple["char"](":"))(function () {
              return Prelude.bind(Text_Parsing_Simple.bindParser)(Text_Parsing_Simple.skipSpaces)(function () {
                  return Prelude.bind(Text_Parsing_Simple.bindParser)(Text_Parsing_Simple.word)(function (v) {
                      return Prelude.bind(Text_Parsing_Simple.bindParser)(Text_Parsing_Simple.skipSpaces)(function () {
                          return Prelude.bind(Text_Parsing_Simple.bindParser)(Text_Parsing_Simple["int"])(function (v1) {
                              return Prelude.pure(Text_Parsing_Simple.applicativeParser)({
                                  status: v, 
                                  level: v1
                              });
                          });
                      });
                  });
              });
          });
      });
  });
  var memory = (function () {
      var f = function (str) {
          return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array.head(Data_Array.filter(Data_String.contains("Mem:"))(Data_String.split("\n")(str))))(function (v) {
              var words = Data_Array.filter(function (v1) {
                  return v1 !== "";
              })(Data_String.split(" ")(v));
              var num = Text_Parsing_Simple.altL(Prelude.map(Text_Parsing_Simple.functorParser)(Data_Int.toNumber)(Text_Parsing_Simple["int"]))(Text_Parsing_Simple.number);
              return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array["!!"](words)(1))(function (v1) {
                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_Array["!!"](words)(2))(function (v2) {
                      return Prelude.bind(Data_Maybe.bindMaybe)(Control_Error_Util.hush(Text_Parsing_Simple.parse(num)(v1)))(function (v3) {
                          return Prelude.bind(Data_Maybe.bindMaybe)(Control_Error_Util.hush(Text_Parsing_Simple.parse(num)(v2)))(function (v4) {
                              return Prelude.pure(Data_Maybe.applicativeMaybe)("Mem: " + Util.pctColorInv(v4 / v3)(v2));
                          });
                      });
                  });
              });
          });
      };
      var prettyMemory = function ($48) {
          return Data_Maybe.fromMaybe("Could not read memory")(f($48));
      };
      return Prelude[">>="](Control_Monad_Aff.bindAff)(Snail.run("free")([ "-m" ]))(Data_Either.either(function ($49) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)(Util.red(Control_Monad_Eff_Exception.message($49)));
      })(function ($50) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)(prettyMemory($50));
      }));
  })();
  var date = Lemonbar_Script.script(5)(Prelude[">>="](Control_Monad_Aff.bindAff)(Snail.run("date")([ "+%a %H:%M" ]))(Data_Either.either(function ($51) {
      return Prelude.pure(Control_Monad_Aff.applicativeAff)(Util.red(Control_Monad_Eff_Exception.message($51)));
  })(function ($52) {
      return Prelude.pure(Control_Monad_Aff.applicativeAff)(Lemonbar_Format.center($52));
  })));
  var batMeter = function (v) {
      if (v === 9) {
          return "\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2661";
      };
      if (v === 8) {
          return "\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2661\u2661";
      };
      if (v === 7) {
          return "\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2661\u2661\u2661";
      };
      if (v === 6) {
          return "\u2665\u2665\u2665\u2665\u2665\u2665\u2661\u2661\u2661\u2661";
      };
      if (v === 5) {
          return "\u2665\u2665\u2665\u2665\u2665\u2661\u2661\u2661\u2661\u2661";
      };
      if (v === 4) {
          return "\u2665\u2665\u2665\u2665\u2661\u2661\u2661\u2661\u2661\u2661";
      };
      if (v === 3) {
          return "\u2665\u2665\u2665\u2661\u2661\u2661\u2661\u2661\u2661\u2661";
      };
      if (v === 2) {
          return "\u2665\u2665\u2661\u2661\u2661\u2661\u2661\u2661\u2661\u2661";
      };
      if (v === 1) {
          return "\u2665\u2661\u2661\u2661\u2661\u2661\u2661\u2661\u2661\u2661";
      };
      if (v === 0) {
          return "\u2661\u2661\u2661\u2661\u2661\u2661\u2661\u2661\u2661\u2661";
      };
      return "\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2665\u2665";
  };
  var batInfo = function (b) {
      var stat = (function () {
          if (b.status === "Discharging,") {
              return Util.red("DISC ");
          };
          if (b.status === "Full,") {
              return Lemonbar_Format.fg("#53FFFF")("FULL ");
          };
          return Util.green("CHAR ");
      })();
      return stat + Lemonbar_Format.fg("#fe40b9")(batMeter((5 + b.level | 0) / 10 | 0));
  };
  var transformBattery = function (bat) {
      return Prelude.bind(Data_Either.bindEither)(bat)(function (v) {
          return Prelude.bind(Data_Either.bindEither)(Data_Either.either(function ($53) {
              return Data_Either.Left.create(Control_Monad_Eff_Exception.error($53));
          })(Prelude.pure(Data_Either.applicativeEither))(Text_Parsing_Simple.parse(parseBattery)(v)))(function (v1) {
              return Prelude.pure(Data_Either.applicativeEither)(batInfo(v1));
          });
      });
  };
  var battery = Prelude.bind(Control_Monad_Aff.bindAff)(Snail.run("acpi")([ "battery" ]))(function (v) {
      return Data_Either.either(function ($54) {
          return Prelude.pure(Control_Monad_Aff.applicativeAff)(Control_Monad_Eff_Exception.message($54));
      })(Prelude.pure(Control_Monad_Aff.applicativeAff))(transformBattery(v));
  });
  var app = Lemonbar_Script.script(15)(Prelude.bind(Control_Monad_Aff.bindAff)(battery)(function (v) {
      return Prelude.bind(Control_Monad_Aff.bindAff)(wifi)(function (v1) {
          return Prelude.bind(Control_Monad_Aff.bindAff)(Uptime.upTimeFunk)(function (v2) {
              return Prelude.bind(Control_Monad_Aff.bindAff)(memory)(function (v3) {
                  return Prelude.bind(Control_Monad_Aff.bindAff)(temp)(function (v4) {
                      return Prelude.bind(Control_Monad_Aff.bindAff)(Loadavg.cpu)(function (v5) {
                          return Prelude.pure(Control_Monad_Aff.applicativeAff)(Util.foldWidgets(Data_Foldable.foldableArray)([ v5, v4, v3, v2, v, v1 ]));
                      });
                  });
              });
          });
      });
  }));
  var main = Snail.crawl(app);
  exports["memory"] = memory;
  exports["batMeter"] = batMeter;
  exports["temp"] = temp;
  exports["wifi"] = wifi;
  exports["batInfo"] = batInfo;
  exports["parseBattery"] = parseBattery;
  exports["transformBattery"] = transformBattery;
  exports["battery"] = battery;
  exports["date"] = date;
  exports["app"] = app;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
